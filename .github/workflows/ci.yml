name: CI

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  rust-lint:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.3.0

      - name: Update Rust toolchain
        run: rustup update

      - name: Rust Cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1

      - name: Clippy
        run: cargo clippy --all-targets --locked -- --deny warnings

      - name: rustfmt
        run: cargo fmt -- --check

  rust-unit-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.3.0

      - name: Update Rust toolchain
        run: rustup update

      - name: Rust Cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1

      - name: Run unit tests
        run: cargo test --locked

  # Currently a separate job since the #coverage(off) attribute requires nightly Rust. As soon as we can use llvm-cov
  # without Rust nightly, we should merge this job with the regular unit tests.
  unit-test-coverage:
    name: Generate test coverage report
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.3.0
        with:
          submodules: true

      - name: Install nightly Rust toolchain
        run: rustup install nightly

      - name: Rust Cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@47be02f2de8a32619316956f6117e150bdc6763f # v2.62.44
        with:
          tool: cargo-llvm-cov

      - name: Run unit tests and generate coverage report
        run: cargo +nightly llvm-cov --locked --html

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "llvm-cov-html-${{github.event.repository.name}}-${{github.sha}}"
          path: "target/llvm-cov/html"
          if-no-files-found: "error"

  rust-integration-test:
    name: Integration (${{ matrix.builder }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    env:
      INTEGRATION_TEST_CNB_BUILDER: heroku/${{ matrix.builder }}

    strategy:
      fail-fast: false
      matrix:
        builder: ["builder:24", "builder:22"]
        arch: ["amd64", "arm64"]
        exclude:
          - builder: "builder:22"
            arch: "arm64"

    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.3.0

      # The dpkg man-db trigger is excessively slow on GHA runners, see e.g.:
      # https://github.com/actions/runner-images/issues/10977
      # https://github.com/actions/runner/issues/4030
      # We disable it here so it does not fire at the end of the following apt-get install
      - name: Disable man-db auto-update
        run: sudo rm -f /var/lib/man-db/auto-update

      - name: Install musl-tools
        run: sudo apt-get install musl-tools -y --no-install-recommends

      - name: Update Rust toolchain
        run: rustup update

      - name: Install Rust linux-musl target
        run: rustup target add ${{ matrix.arch == 'arm64' && 'aarch64-unknown-linux-musl' || 'x86_64-unknown-linux-musl' }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1

      - name: Install Pack CLI
        uses: buildpacks/github-actions/setup-pack@2d58ee348f9a2c381888bfe3dfe99caffdddc84f # v5.9.6

      - name: Install Nextest
        uses: taiki-e/install-action@47be02f2de8a32619316956f6117e150bdc6763f # v2.62.44
        with:
          tool: nextest

      - name: Pull builder image
        run: docker pull ${{ env.INTEGRATION_TEST_CNB_BUILDER }}

      - name: Pull run image
        run: |
          RUN_IMAGE=$(
            docker inspect --format='{{index .Config.Labels "io.buildpacks.builder.metadata"}}' '${{ env.INTEGRATION_TEST_CNB_BUILDER }}' \
            | jq --exit-status --raw-output '.stack.runImage.image'
          )
          docker pull "${RUN_IMAGE}"

      - name: Run integration tests
        run: cargo nextest run --run-ignored only --locked
